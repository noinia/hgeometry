* TODO
HsYAML has GLPL licence apparently

** DONE make a constructable point class, getting rid of the Default ext constraints

** DONE make everything public sublibraries of hgeometry
hopefully this will also make the CI story easier

* DONE rename the minimum1 and maximum1 functions in the HGeometry.List.Utils module

* TODO build clean with werror

** DONE hgeometry-combinatorial
** DONE hgeometry-vector
** DONE hgeometry-point
** TODO hgeometry-kernel
** TODO hgeometry
** DONE hgeometry-ipe
** TODO hgeometry-svg
* DONE update the readme
* DONE haddock builder

* TODO hgeometry-examples
** TODO bapc stuff as tests
** TODO floorpainting BAPC example with the segment tree :)

** TODO move LINEQ to HGeometry.Line.NonVertical

* DONE fromPointAndNormal of NonVertical hyperplane

this can't be right:

  fromPointAndNormal _ n = NonVerticalHyperPlane n

we should really use the in plane point p

* DONE normal vector business

want:

- normalVector points into the positive halfspace

- onSideTest p







* DONE write some tests for testing line x line intersections of the various forms

basically test that converting to a diff line type results in
consistent results

* DONE polymorphic cooordinates
* DONE Doctests
** DONE vector
** DONE point
** DONE kernel
** TODO hgeometry
** DONE hgeometry-ipe
** DONE hgeometry-combinatorial
* DONE setup hspec tests
** DONE vector
** DONE point
** DONE kernel
** DONE hgeometry

* TODO raytracer demo

** TODO Ray x Triangle intersection

https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm


* TODO our Melkman algorithm also just works when given a polyline.
See if we can generalize its type signatures

* TODO 2d linear programming
* TODO port the visibility polygon stuff
* TODO port the shortest path in simple polygon stuff

* DONE ccwPredecessorOf’ and ‘ccwSuccessorOf’ convex polygon
* TODO additional quickcheck tests

** TODO all vertices of a simple polygon lie on the boundary of the polygon (pointInPoly)
*** DONE generate random simple polygons

* TODO ipe tests
** TODO point
** TODO kernel
*** CANCELED IntersectionSpec
*** DONE BoxSpec
*** TODO trianglespec
*** DONE LineSegmentSpec
most of the tests are uncommented. Not sure why

*** DONE halflinespec
intersecting halflines with boxes seems to go wrong somehow.


** TODO hgeometry
*** DONE convex polygon spec

* TODO box x box intersection
** DONE fromExtent to build a Box

* TODO renderer
* TODO ipe-renderer
* DONE test import
** DONE ipe-reader
* DONE point in polygon
** DONE for simple polygon

* TODO Line segment intersection ; i.e Benthey Otham
** DONE the naive algorithm
*** DONE represent the various types of intersections
*** DONE debug the onSideTest hyperplane function again
*** DONE test intersection for colinear line segments incorrect
** TODO benthey othham for open-ended segments.

* TODO polygon triangulation
** DONE triangulate monotone
** DONE triangiulate non-monotone
*** DONE split into non-monotone parts
*** DONE graph representation
** TODO triangulate a polygon with holes

** DONE triangulate world demo/benchmark

initial run that actually triangulates the whole world:

cabal run hgeometry-examples:hgeometry-triangulateworld -- -i  -o   130.82s user 0.50s system 99% cpu 2:12.23 total




** DONE verify fromPoints

i.e. add a test that makes sure that the cyclic zero's are correct,
i.e. that

myPoly :: SimplePolygon (Point 2 R)
myPoly = fromJust . fromPoints $
  read  @[Point 2 R] "[Point2 0 0,Point2 26 37.1,Point2 7.1 45.2,Point2 (-6.6) 39,Point2 (-1.9) 15.1,Point2 (-1.4) 12.7,Point2 0 0]"

sanitizes the two Point2 0 0's at the end and the start



** TODO polygons with holes
*** DONE represent polygons with holes
*** TODO inpolygon test
make sure we can report in which hole we are as well
*** TODO some tests
*** DONE render them to ipe
*** TODO intersect with a line or with a segment

* DONE avoid binary files in the tests ; replace them with json files or so
(in particular, the arbitrary instances for polygon)

* TODO update the readme
** TODO add other libraries

* TODO the type for convex hull seems wrong/not general enough; why don't we accept an Foldable1 ?

* DONE polyline simplification
** DONE imai iri
** DONE DP

* TODO arrangement
** TODO line-segment-intersection sweep
** TODO planar subdivision
*** DONE plane graph

* TODO 3d-lower-envelope
** TODO naive
*** DONE triangulated envelope
*** DONE handle degeneracies
*** DONE handle all colinear
*** TODO cyclic sorting of the edges


** TODO set up generating plane graphs so that we I can devbug the separator stuff


** TODO define tests
*** DONE correctly render a lower envelope/vd with 1 vertex and 3 unbounded edges
*** DONE correctly render bounded edges of some larger set of points
*** DONE correctly render unbounded edges of some larger set of points
*** TODO properyt test that every (bounded) face is convex

** TODO some sort of benchmarking for the naive algorithm


** TODO Set3 type to clean up and/or speed up the fromVertexForm code ?

I wonder if we can clean up and/or speed up the fromVertexForm code by
having a specific Set3 type that stores at least three elements. Since
every vertex should have at least (and probably often also exactly)
three definers, this could clean up some of the code. (We have a few
"there should be at least three items here" cases).

Still not entirely sure that will help stufficiently though. Since we
are sometimes relying on sorting etc, to be efficient.

e.g. if we have three definers, and we delete h from it (where h is
guaranteed to appear: )


** TODO planar separators

** TODO batch point-location by sweeping scheme

** DONE vertices -> adjrep

** TODO 3d convex hull

** DONE render faces as polygons
** DONE 3d export of the lower envelope

* DONE Convex polygons
** DONE binary search extremal direction
** DONE point in polygon
*** DONE almost done; but needs some fractional -> num work in point on line segment
*** DONE report the edge on whichwe lie in case we lie on an edge
*** DONE make an inpolygon typeclass
*** DONE test pointInPolygon for convex polygons; seems we have a discrepency



* TODO data structures
** TODO kd-tree
** TODO range-tree
*** DONE base tree
** TODO segment-tree
*** DONE base tree
** TODO quad-tree
** DONE interval-tree

* DONE 2d-convex hull algos
** DONE divide and conquer
** DONE quickhull
** DONE jarvis march
** DONE convex hull of polygon


* TODO smallest enclosing ball
** TODO linear programming (RIC)

* TODO delaunay triangulation
* DONE voronoi diagram
** DONE all colinear points
* DONE closest pair
* DONE minkowski-sum
** DONE fix testcases
probably requires testing if two polygons are cyclic shifts

* TODO common intersection of halfplanes
** TODO have some type representing the unbounded common intersection part


* DONE profile the convex hull algos, since they are quite a bit slower than just sorting.

-- I'm now guessing that the _Vector iso is causing the trouble, since
that thing is potentially rebuilding a new vector (using generate)
even if we are just accessing some field. If that is indeed happening,
then that is very wasteful.

* DONE clean up the benchmarks



* TODO images in the haddocks

* TODO visual debugger
maybe make s.t. like prettychart; i.e have some webserver running that
can show geometries as svg, and use ghci to start the server and send
input to the server.


* index state
    cabal v2-update 'hackage.haskell.org,2022-12-29T17:16:17Z'



* performance

I compared the BAPC armybase tests. It's a bit of an apples vs oranges
comparison, since I only had an old 8.10.7 build of the bapc examples
around, and I've built the new stuff using 9.6.1

anyway, the old bapc armybase testsuite took

13.65s user 0.03s system 99% cpu 13.687 total

whereas the new run took roughly

8.28s user 0.02s system 99% cpu 8.305 total

not sure what's the mian gain. Maybe most of it is simply switching to
a faster sorting algo; since we are now using vector-algorithms's
introsort rather than mergesort.
>
Still, it's nice that we are faster :).















* old tests
